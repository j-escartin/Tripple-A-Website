/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.product.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.product.service.model.Customer;
import com.product.service.model.CustomerModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Customer service. Represents a row in the &quot;SP_Customer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CustomerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomerImpl
 * @generated
 */
@JSON(strict = true)
public class CustomerModelImpl
	extends BaseModelImpl<Customer> implements CustomerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer model instance should use the <code>Customer</code> interface instead.
	 */
	public static final String TABLE_NAME = "SP_Customer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"customerId", Types.BIGINT},
		{"customerName", Types.VARCHAR}, {"customerEmail", Types.VARCHAR},
		{"customerAddress", Types.VARCHAR}, {"customerValidId", Types.VARCHAR},
		{"customerConNo", Types.VARCHAR}, {"productsId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("customerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customerValidId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customerConNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SP_Customer (uuid_ VARCHAR(75) null,customerId LONG not null primary key,customerName VARCHAR(75) null,customerEmail VARCHAR(75) null,customerAddress VARCHAR(75) null,customerValidId VARCHAR(75) null,customerConNo VARCHAR(75) null,productsId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table SP_Customer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY customer.customerName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SP_Customer.customerName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CUSTOMERNAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CustomerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _customerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCustomerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Customer.class;
	}

	@Override
	public String getModelClassName() {
		return Customer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Customer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Customer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Customer, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Customer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Customer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Customer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Customer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Customer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Customer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Customer, Object>>();
		Map<String, BiConsumer<Customer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Customer, ?>>();

		attributeGetterFunctions.put("uuid", Customer::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Customer, String>)Customer::setUuid);
		attributeGetterFunctions.put("customerId", Customer::getCustomerId);
		attributeSetterBiConsumers.put(
			"customerId", (BiConsumer<Customer, Long>)Customer::setCustomerId);
		attributeGetterFunctions.put("customerName", Customer::getCustomerName);
		attributeSetterBiConsumers.put(
			"customerName",
			(BiConsumer<Customer, String>)Customer::setCustomerName);
		attributeGetterFunctions.put(
			"customerEmail", Customer::getCustomerEmail);
		attributeSetterBiConsumers.put(
			"customerEmail",
			(BiConsumer<Customer, String>)Customer::setCustomerEmail);
		attributeGetterFunctions.put(
			"customerAddress", Customer::getCustomerAddress);
		attributeSetterBiConsumers.put(
			"customerAddress",
			(BiConsumer<Customer, String>)Customer::setCustomerAddress);
		attributeGetterFunctions.put(
			"customerValidId", Customer::getCustomerValidId);
		attributeSetterBiConsumers.put(
			"customerValidId",
			(BiConsumer<Customer, String>)Customer::setCustomerValidId);
		attributeGetterFunctions.put(
			"customerConNo", Customer::getCustomerConNo);
		attributeSetterBiConsumers.put(
			"customerConNo",
			(BiConsumer<Customer, String>)Customer::setCustomerConNo);
		attributeGetterFunctions.put("productsId", Customer::getProductsId);
		attributeSetterBiConsumers.put(
			"productsId", (BiConsumer<Customer, Long>)Customer::setProductsId);
		attributeGetterFunctions.put("groupId", Customer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Customer, Long>)Customer::setGroupId);
		attributeGetterFunctions.put("companyId", Customer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Customer, Long>)Customer::setCompanyId);
		attributeGetterFunctions.put("userId", Customer::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Customer, Long>)Customer::setUserId);
		attributeGetterFunctions.put("userName", Customer::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Customer, String>)Customer::setUserName);
		attributeGetterFunctions.put("createDate", Customer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Customer, Date>)Customer::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Customer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Customer, Date>)Customer::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	@JSON
	@Override
	public String getCustomerName() {
		if (_customerName == null) {
			return "";
		}
		else {
			return _customerName;
		}
	}

	@Override
	public void setCustomerName(String customerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerName = customerName;
	}

	@JSON
	@Override
	public String getCustomerEmail() {
		if (_customerEmail == null) {
			return "";
		}
		else {
			return _customerEmail;
		}
	}

	@Override
	public void setCustomerEmail(String customerEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerEmail = customerEmail;
	}

	@JSON
	@Override
	public String getCustomerAddress() {
		if (_customerAddress == null) {
			return "";
		}
		else {
			return _customerAddress;
		}
	}

	@Override
	public void setCustomerAddress(String customerAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerAddress = customerAddress;
	}

	@JSON
	@Override
	public String getCustomerValidId() {
		if (_customerValidId == null) {
			return "";
		}
		else {
			return _customerValidId;
		}
	}

	@Override
	public void setCustomerValidId(String customerValidId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerValidId = customerValidId;
	}

	@JSON
	@Override
	public String getCustomerConNo() {
		if (_customerConNo == null) {
			return "";
		}
		else {
			return _customerConNo;
		}
	}

	@Override
	public void setCustomerConNo(String customerConNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerConNo = customerConNo;
	}

	@JSON
	@Override
	public long getProductsId() {
		return _productsId;
	}

	@Override
	public void setProductsId(long productsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productsId = productsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Customer.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Customer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Customer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Customer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerImpl customerImpl = new CustomerImpl();

		customerImpl.setUuid(getUuid());
		customerImpl.setCustomerId(getCustomerId());
		customerImpl.setCustomerName(getCustomerName());
		customerImpl.setCustomerEmail(getCustomerEmail());
		customerImpl.setCustomerAddress(getCustomerAddress());
		customerImpl.setCustomerValidId(getCustomerValidId());
		customerImpl.setCustomerConNo(getCustomerConNo());
		customerImpl.setProductsId(getProductsId());
		customerImpl.setGroupId(getGroupId());
		customerImpl.setCompanyId(getCompanyId());
		customerImpl.setUserId(getUserId());
		customerImpl.setUserName(getUserName());
		customerImpl.setCreateDate(getCreateDate());
		customerImpl.setModifiedDate(getModifiedDate());

		customerImpl.resetOriginalValues();

		return customerImpl;
	}

	@Override
	public Customer cloneWithOriginalValues() {
		CustomerImpl customerImpl = new CustomerImpl();

		customerImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		customerImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		customerImpl.setCustomerName(
			this.<String>getColumnOriginalValue("customerName"));
		customerImpl.setCustomerEmail(
			this.<String>getColumnOriginalValue("customerEmail"));
		customerImpl.setCustomerAddress(
			this.<String>getColumnOriginalValue("customerAddress"));
		customerImpl.setCustomerValidId(
			this.<String>getColumnOriginalValue("customerValidId"));
		customerImpl.setCustomerConNo(
			this.<String>getColumnOriginalValue("customerConNo"));
		customerImpl.setProductsId(
			this.<Long>getColumnOriginalValue("productsId"));
		customerImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		customerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		customerImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		customerImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		customerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		customerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return customerImpl;
	}

	@Override
	public int compareTo(Customer customer) {
		int value = 0;

		value = getCustomerName().compareTo(customer.getCustomerName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Customer)) {
			return false;
		}

		Customer customer = (Customer)object;

		long primaryKey = customer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Customer> toCacheModel() {
		CustomerCacheModel customerCacheModel = new CustomerCacheModel();

		customerCacheModel.uuid = getUuid();

		String uuid = customerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			customerCacheModel.uuid = null;
		}

		customerCacheModel.customerId = getCustomerId();

		customerCacheModel.customerName = getCustomerName();

		String customerName = customerCacheModel.customerName;

		if ((customerName != null) && (customerName.length() == 0)) {
			customerCacheModel.customerName = null;
		}

		customerCacheModel.customerEmail = getCustomerEmail();

		String customerEmail = customerCacheModel.customerEmail;

		if ((customerEmail != null) && (customerEmail.length() == 0)) {
			customerCacheModel.customerEmail = null;
		}

		customerCacheModel.customerAddress = getCustomerAddress();

		String customerAddress = customerCacheModel.customerAddress;

		if ((customerAddress != null) && (customerAddress.length() == 0)) {
			customerCacheModel.customerAddress = null;
		}

		customerCacheModel.customerValidId = getCustomerValidId();

		String customerValidId = customerCacheModel.customerValidId;

		if ((customerValidId != null) && (customerValidId.length() == 0)) {
			customerCacheModel.customerValidId = null;
		}

		customerCacheModel.customerConNo = getCustomerConNo();

		String customerConNo = customerCacheModel.customerConNo;

		if ((customerConNo != null) && (customerConNo.length() == 0)) {
			customerCacheModel.customerConNo = null;
		}

		customerCacheModel.productsId = getProductsId();

		customerCacheModel.groupId = getGroupId();

		customerCacheModel.companyId = getCompanyId();

		customerCacheModel.userId = getUserId();

		customerCacheModel.userName = getUserName();

		String userName = customerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			customerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			customerCacheModel.createDate = createDate.getTime();
		}
		else {
			customerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			customerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			customerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return customerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Customer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Customer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Customer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Customer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Customer>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Customer.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _customerId;
	private String _customerName;
	private String _customerEmail;
	private String _customerAddress;
	private String _customerValidId;
	private String _customerConNo;
	private long _productsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Customer, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Customer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("customerName", _customerName);
		_columnOriginalValues.put("customerEmail", _customerEmail);
		_columnOriginalValues.put("customerAddress", _customerAddress);
		_columnOriginalValues.put("customerValidId", _customerValidId);
		_columnOriginalValues.put("customerConNo", _customerConNo);
		_columnOriginalValues.put("productsId", _productsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("customerId", 2L);

		columnBitmasks.put("customerName", 4L);

		columnBitmasks.put("customerEmail", 8L);

		columnBitmasks.put("customerAddress", 16L);

		columnBitmasks.put("customerValidId", 32L);

		columnBitmasks.put("customerConNo", 64L);

		columnBitmasks.put("productsId", 128L);

		columnBitmasks.put("groupId", 256L);

		columnBitmasks.put("companyId", 512L);

		columnBitmasks.put("userId", 1024L);

		columnBitmasks.put("userName", 2048L);

		columnBitmasks.put("createDate", 4096L);

		columnBitmasks.put("modifiedDate", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Customer _escapedModel;

}